using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis.CSharp;
using System.Diagnostics;

namespace CLIParserSourceGenerator
{
    [Generator]
    public class PitayaSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            // find main method
            INamedTypeSymbol? mainType = context.Compilation.GetSymbolsWithName(s => s == "Program", SymbolFilter.Type).First() as INamedTypeSymbol;
            if (mainType == null)
            {
                throw new Exception("Could not find Program type");
            }

            IMethodSymbol? mainMethod = mainType.GetMembers().First(s => s.Name == "Main") as IMethodSymbol;
            if (mainMethod == null)
            {
                throw new Exception("Could not find Main method");
            }

            string? assemblyName = context.Compilation.AssemblyName;
            if (assemblyName == null)
            {
                throw new Exception("Could not find assembly name");
            }

            Location location = mainMethod.Locations.First();
            SyntaxNode? mainMethodSyntaxNode = location.SourceTree?.GetRoot().FindNode(location.SourceSpan);
            if (mainMethodSyntaxNode == null)
            {
                throw new Exception("Could not find Main method syntax node");
            }

            var optionInfos = mainMethod.Parameters.Select(p => OptionInfo.Create(ParameterInfo.Create(p))).ToList();

            List<string> commentContent = mainMethodSyntaxNode.GetLeadingTrivia()
                .Where(t => t.IsKind(SyntaxKind.SingleLineCommentTrivia))
                .Select(t => t.ToString().Trim('/').Trim())
                .ToList();
            OverallSourceGenerator overallSourceGenerator = new OverallSourceGenerator(mainType, mainMethod.ReturnType.ToDisplayString(), assemblyName, optionInfos, commentContent);
            string source = overallSourceGenerator.GenerateSource();
            string typeName = overallSourceGenerator.TypeName;

            // add the source code to the compilation
            context.AddSource($"AutoGeneratedProgram.g.cs", source);
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // no initialization required
#if DEBUG
            //if (!Debugger.IsAttached)
            //{
            //    Debugger.Launch();
            //}
#endif
        }
    }
}
