using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace CLIParserSourceGenerator
{
    internal class ParserGenerator
    {
        public string ClassName { get; }
        private string _optionsClassName { get; }
        private List<OptionInfo> _options { get; }

        public ParserGenerator(List<OptionInfo> options, string optionsClassName)
        {
            this._options = options;
            this.ClassName = "AutoGeneratedCLIParser";
            this._optionsClassName = optionsClassName;
        }

        public string GenerateSource()
        {
            return this.Generate().NormalizeWhitespace().ToFullString();
        }

        private ClassDeclarationSyntax Generate()
        {
            List<SwitchSectionSyntax> sections = this._options.Select(o => o.GenerateSwitchSection()).ToList();
            sections.Add(this.GenerateHelpSection());
            sections.Add(
                SwitchSection()
                    .WithLabels(
                        SingletonList<SwitchLabelSyntax>(
                            DefaultSwitchLabel()
                        )
                    )
                    .WithStatements(
                        SingletonList<StatementSyntax>(
                            ParseStatement("throw new ArgumentException($\"'{arg}' is not a recognized option\");")
                        )
                    )
            );

            List<StatementSyntax> missingOptionStatements =
            [
                ParseStatement("List<string> missing = new();"),
                ..this._options.Select(o => o.GenerateSpecificMissingOptionCheck()).WhereNotNull(),
                ParseStatement("throw new ArgumentException($\"Missing required argument{(missing.Count > 1 ? \"s\" : \"\")}: {string.Join(\", \", missing)}\");"),
            ];


            return ClassDeclaration(this.ClassName)
                .WithModifiers(
                    TokenList(
                        Token(SyntaxKind.InternalKeyword)
                    )
                )
                .WithMembers(
                    SingletonList<MemberDeclarationSyntax>(
                        MethodDeclaration(
                            IdentifierName(this._optionsClassName),
                            Identifier("Parse")
                        )
                        .WithModifiers(
                            TokenList(
                                Token(SyntaxKind.PublicKeyword)
                            )
                        )
                        .WithParameterList(
                            ParameterList(
                                SingletonSeparatedList<ParameterSyntax>(
                                    Parameter(
                                        Identifier("args")
                                    )
                                    .WithType(
                                        ArrayType(
                                            PredefinedType(
                                                Token(SyntaxKind.StringKeyword)
                                            )
                                        )
                                        .WithRankSpecifiers(
                                            SingletonList<ArrayRankSpecifierSyntax>(
                                                ArrayRankSpecifier(
                                                    SingletonSeparatedList<ExpressionSyntax>(
                                                        OmittedArraySizeExpression()
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                        .WithBody(
                            Block(
                                ParseStatement($"{this._optionsClassName} options = new();"),
                                ForStatement(
                                    Block(
                                        ParseStatement("string arg = args[i];"),
                                        ParseStatement("i++;"),
                                        SwitchStatement(
                                            IdentifierName("arg")
                                        )
                                        .WithSections(
                                            List<SwitchSectionSyntax>(sections)
                                        )
                                    )
                                )
                                .WithDeclaration(
                                    VariableDeclaration(
                                        PredefinedType(
                                            Token(SyntaxKind.IntKeyword)
                                        )
                                    )
                                    .WithVariables(
                                        SingletonSeparatedList<VariableDeclaratorSyntax>(
                                            VariableDeclarator(
                                                Identifier("i")
                                            )
                                            .WithInitializer(
                                                EqualsValueClause(
                                                    LiteralExpression(
                                                        SyntaxKind.NumericLiteralExpression,
                                                        Literal(0)
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                                .WithCondition(
                                    BinaryExpression(
                                        SyntaxKind.LogicalAndExpression,
                                        BinaryExpression(
                                            SyntaxKind.LessThanExpression,
                                            IdentifierName("i"),
                                            ParseExpression("args.Length")
                                        ),
                                        PrefixUnaryExpression(
                                            SyntaxKind.LogicalNotExpression,
                                            ParseExpression("options.___ShowHelp___")
                                        )
                                    )
                                )
                                .WithIncrementors(
                                    SingletonSeparatedList<ExpressionSyntax>(
                                        PostfixUnaryExpression(
                                            SyntaxKind.PostIncrementExpression,
                                            IdentifierName("i")
                                        )
                                    )
                                ),
                                IfStatement(
                                    BinaryExpression(
                                        SyntaxKind.LogicalAndExpression,
                                        PrefixUnaryExpression(
                                            SyntaxKind.LogicalNotExpression,
                                            ParseExpression("options.___ShowHelp___")
                                        ),
                                        PrefixUnaryExpression(
                                            SyntaxKind.LogicalNotExpression,
                                            ParenthesizedExpression(
                                                this.GenerateAndedSetValues()
                                            )
                                        )
                                    ),
                                    Block(missingOptionStatements)
                                ),
                                ReturnStatement(
                                    IdentifierName("options")
                                )
                            )
                        )
                    )
                );
        }

        protected ExpressionSyntax GenerateAndedSetValues()
        {
            string expression = string.Join(" && ", this._options.Select(o => o.GenerateSetValueAccess()?.ToString()).WhereNotNull());
            return ParseExpression(expression);
        }

        protected SwitchSectionSyntax GenerateHelpSection()
        {
            return SwitchSection()
                .WithLabels(
                    List<SwitchLabelSyntax>(
                        new SwitchLabelSyntax[]{
                            CaseSwitchLabel(
                                LiteralExpression(
                                    SyntaxKind.StringLiteralExpression,
                                    Literal("-h")
                                )
                            ),
                            CaseSwitchLabel(
                                LiteralExpression(
                                    SyntaxKind.StringLiteralExpression,
                                    Literal("-?")
                                )
                            ),
                            CaseSwitchLabel(
                                LiteralExpression(
                                    SyntaxKind.StringLiteralExpression,
                                    Literal("--help")
                                )
                            )
                        }
                    )
                )
                .WithStatements(
                    List<StatementSyntax>(
                        new StatementSyntax[]{
                            ParseStatement("options.___ShowHelp___ = true;"),
                            BreakStatement()
                        }
                    )
                );
        }
    }
}
