using CLIParserSourceGeneratorTests.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CLIParserSourceGenerator;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CLIParserSourceGeneratorTests
{
    [TestClass]
    public class OptionsClassGeneratorTests
    {
        [TestMethod]
        public void CreateTest()
        {
            var parameter = FakeParamaterInfo.Create(parameterName: "aValue");
            List<OptionInfo> options = [
                OptionInfo.Create(parameter)
                , OptionInfo.Create(parameter)
                , OptionInfo.Create(parameter)
            ];

            var optionsClassGenerator = new OptionsClassGenerator(options);
            Assert.AreEqual("AutoGeneratedCLIOptionsHolder", optionsClassGenerator.ClassName);
        }

        [TestMethod]
        public void GenerateSourceTest()
        {
            List<OptionInfo> options = [
                OptionInfo.Create(FakeParamaterInfo.Create(parameterName: "aValue"))
                , OptionInfo.Create(FakeParamaterInfo.Create(parameterName: "anUnsignedInt", typeName: "uint", hasDefaultValue: true, defaultValue: 1))
                , OptionInfo.Create(FakeParamaterInfo.Create(parameterName: "aString", typeName: "string", hasDefaultValue: true, defaultValue: "bob"))
                , OptionInfo.Create(FakeParamaterInfo.Create(parameterName: "aNullable", nullableAnnotation: Microsoft.CodeAnalysis.NullableAnnotation.Annotated))
            ];
            var optionsClassGenerator = new OptionsClassGenerator(options);
            var source = optionsClassGenerator.GenerateSource();
            string expected = """
                #pragma warning disable CS8618
                internal class AutoGeneratedCLIOptionsHolder
                {
                    public bool ___ShowHelp___ { get; set; }
                    public int aValue { get; set; }
                    public bool _aValueValueSet { get; set; }
                    public uint anUnsignedInt { get; set; } = 1;
                    public string aString { get; set; } = "bob";
                    public int? aNullable { get; set; }
                }
                """;
            Assert.AreEqual(expected, source);
        }
    }
}
